[project]
name = "voice-agent-backend"
version = "0.1.0"
description = "Voice Agent Platform Backend with User Management"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Voice Agent Team", email = "team@voiceagent.com"},
]

dependencies = [
    # Core framework
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    # Authentication & Security
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    # Data validation
    "pydantic>=2.10.6",
    "email-validator>=2.1.0",
    # Environment & Config
    "python-dotenv>=1.1.1",
    # Logging
    "structlog>=25.4.0",
    # Voice processing (Pipecat)
    "pipecat-ai[google,openai,silero]>=0.0.75",
    # WebSocket & HTTP
    "websockets>=13.1",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    # Audio processing
    "numpy>=1.26.4",
    "soundfile>=0.13.1",
    "aiofiles>=24.1.0",
    # AI Services
    "openai>=1.6.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "watchdog>=3.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "faker>=20.0.0",
]

[project.scripts]
voice-agent-server = "main:main"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["voice_agent"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["voice_agent"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pipecat.*",
    "structlog.*",
    "pytest.*",
]
ignore_missing_imports = true

[dependency-groups]
test = [
    "faker>=37.4.0",
    "httpx>=0.28.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]
